Thu Jan  7 13:35:49 PST 2016

Talking more about strings and languages

Example:        w = foobar
        some prefixes: foo, f, <epsilon>
        some suffixes: bar, ar, r, <epsilon>
        some substrings: OBVIOUS


Formal Definitions:
Def: Prefix: A prefix of a string
    w = w1w2...wn is a string
    x = x1x2...xm such that m<=n and for all i such tthat 1<=i<=m, xi = wi

Def: Suffix: A suffix of a string
        w = w1w2....wn is a string
        w<sub k>w<sub k+1>....w<sub n> where
        1<=k<=n, or is the empty string <epsilon>.

Def: Substring: A substring of a string w=w1w2....wn is a string w<sub i>w<sub i+1>w<sub j>
                where 1<= i <= j <= n, or is the empty string <epsilon>

Def: Concatenation: Let x = x1x2....xn and y = y1y2....yn be strings, then the concatenatio of x and y is xy = x1........xny1......ym
Notation if k is a natural number, x<super k> = x*x....*x   <---- k times

if |x| = 3 and k = 4 then |x<super k>| = 12

ex. x = cat, k = 2 then x<super k> = catcat


Goal: Create Mahines to Accept/Recognize languages (recognize to be defined later)

ex. <sigma> = {a, b} and A = { w | w<within><sigma><super *> and ab is a substring of w}

ex. bbab<within>A, because the substring portion is ab
    bbba<not within>A, because theres no substring ab



Our state machine will: [analogy]
1) start running at _some state_ (initial state) [booting up]
2) Input is read left-to-right one symbol at a time [parsing]
3) After each symbol, transition to a new state []

                    LOOP b                    LOOP a                LOOP a,b
                   -b--                       -a--                  --a, b--
                  |    |                     |    |                |        |
                  |    V                     |    V                |        V
START--------> [ q<sub b's> ]----- a ------>[ q<sub a> ]---- b ----->[[ q<sub ab> ]]

^
------- usually an arrow that comes from nowhere, not START

if you get to [[q<sub ab>]], then accept the state (string is in the language)

the [[ ]] is an accept state, the [ ] is not

Comment: q<sub b's> = The machine has seen 0 or more b's
a<sub a>: The machine has seen 0 or more b's followed by 1 or more a's
q<sub ab>: The machine has seen ab as a substring

Notes: entire string must be read (consider the language { w | w<within><sigma><super *> and w wends w/ b } )
                                    |------> exercise: construct this machine (DFA)

Def: Let M be a machine over an alphabet <sigma> and w<within><sigma><super *>, then M _accepts_ w if, after processing _all_ of w, M ends in an accept state.

Def: The _language_ of a machine M is the set of strings it accepts. It is denoted L(M).
    L(M) = {W <within><sigma><super *> | M accepts w}

____________

Definition (define formally what our state machine is): [analogy]

A deterministic finite automata (DFA) is a 5-tuple M = (Q, <sigma>, <delta>, q<sub 0>, f) [tuple = struct]
where :

1) Q is a set of states [data member]
2) <sigma> is an alphabet [data member]
3) <delta>: Q x <sigma> -> Q is a _transition function_ [member function]
4) q<sub 0> <within> Q is the start state [data member]
        (this is just a convention, it could be <q sub b's>
        but there ALWAYS HAS to be a start state)
5) F <subset> Q is the set of accept states [data member]

Notes: M may have up to |Q| accept states

Q: If the state is an accept state, is there any string we can guarantee to be a language?
    Yes, <elpsilon>
    If q<sub 0> <within> F, then <epsilon> <within> L(M)

Reminder: Q x <sigma> = { (q, a) | q <within> Q and a <within> <sigma> }

Thu Jan  7 14:35:52 PST 2016

ex. Writing our machine above as a DFA, formally.
    M = (a, <sigma>, <lowercase delta>, q<sub 0>, F) where

1) Q: { q<sub b's>, q<sub a>, q<sub ab> }
2) <sigma>:  {a, b}

3) <delta>    |    a             b
   -------------------------------------------
   q<sub b's> | q<sub a>         q<sub b's>
   q<sub a>   | q<sub a>         q<sub ab>
   q<sub ab>  | q<sub ab>        q<sub ab>
   ------------------------------------------
(example: if state is in q<sub b's> and the next symbol is a, transition to state q<sub a>)

4) q<sub 0> q<sub b's>
5) F = { q<sub ab> }

Our drawing of M is called a _state diagram_



More interesting example that's harder to think about:

ex. Construct the state diagram of M such that

    L(M) = {abwb<super 2> | w <within> {a, b}<super *> } (i.e.: start with ab, end with bb, just b is squared)

    (Implicitly, alphabet is {a, b})

    ex: abbb <within> L(M), ababb <within> L(M)


                                                      LOOP a  <----a-----
----->[q<sub 0>]-----a----->[q <sub a>]-----b----->[q<sub ab>]-----b----->[q<sub abwb>]
           |                 |                           ^                  |
           b                 a                           |                  |
           |                 V                           |                  b
           ----> [q<sub reject>]                         |                  |
                      LOOP a,b                           |                  V
                                                         a -------------  [[q<sub abwb^2]]  LOOP b

q<sub 0>: read nothing
q<sub a>: read a, nothing else
q<sub ab>: read ab, and then some string of a's and b's
q<sub abwb>: read ab, then w<within>{a,b}<super *>, then b
q<sub abwb^2>: read abwb^2 (so in our language!)
q<reject>: I know this string will never be accepted

__________________________________________

Def: A DFA M _accepts_ w = w1w2.....wn <within> <sigma><super *> where M = (Q, <sigma>, <lowercase delta>, q<sub 0>, F) if there are states r0,r1,....,rn <within> Q such that:
[Start state] 1) r0 = <sub 0>
[Transition ] 2) <lowercase delta>(r<sub i>, w<sub i+1>)=r<sub i+1> for 0<=i<=n-1

visually:
[r<sub i>] ---- w<sub i+ 1> -----> [r<sub i + 1>]

[Acceptance ] 3) r<sub n> <within> F (r sub n should be an element of F)

Otherwise, M _rejects_ w. (THIS IS HUGE)
